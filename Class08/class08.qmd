---
title: "Class 8 Mini-Project: Unsupervised Learning Analysis of Human Breast Cancer Cells"
author: "Georgina Canto-Encalada (A59021295)"
format: pdf
---

The goal of this miniproject is for you to explore a complete analysis using the unsupervised learning techniques covered in class. You will extend what you've learned by combinding PCA as a preprocessing step to clustering using data that consist of measurements of cell nuclei of human breast masses:

Our data from today come for FNA of breast tissue 
```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
```

>Q1. How many observations are in this dataset?

There are `r nrow(wisc.df)` individuals in this dataset

>Q2. What is in the `$diagnosis` column? How many of each type?

ANS: We have 357 benignant diagnosis and 212 malignant diagnosis.

```{r}
# One approach
sum(wisc.df$diagnosis=="M")
sum(wisc.df$diagnosis=="B")

#Other approach using `table()`

table(wisc.df$diagnosis)


```

>Q3.How many variables/features in the data are suffixed with _mean?

```{r}
length(grep("_mean",colnames(wisc.df),value="TRUE"))
```

>Q3.How many variables/dimensions have we?

```{r}
ncol(wisc.df)

```

Save the diagnosis for reference later

```{r}
diagnosis<- as.factor(wisc.df$diagnosis)

```

and remove or exclude this column form any of our analysis

```{r}
wisc.data<-wisc.df[,-1]
head(wisc.data)
```
Let's try clustering this data:

Hierachical clustering with `hclust()`
```{r}
wisc.hc <- hclust(dist(wisc.data))
plot(wisc.hc)

```

# Principal Coponent Analysis (PCA)

Let's try PCA on this data. Before doing any analysis like this, we should check if our input data needs to be scaled first.

Side-note:

```{r}
head(mtcars)

```
```{r}
apply(mtcars,2,mean)

```

```{r}
apply(mtcars,2,sd)

```

Let's try a PCA on this car dataset
```{r}
pc<- prcomp(mtcars)
summary(pc)

```
```{r}
biplot(pc)

```

```{r}
pc.scale<- prcomp(mtcars,scale=TRUE)
biplot(pc.scale)

```

We have to scale the data since the SD is really high. Some values are really high while other are really low. We need to scale in order to have more comparable numbers.

## Back to our cancer data set

Do we need to scale this data set?
Yes, we do since the spread is very different.

```{r}
apply(wisc.data,2,sd)
```

```{r}
wisc.pr <- prcomp(wisc.data,scale=TRUE )
  
```
How well do the PCs capture the variance un the original data?

```{r}
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

ANS: 44.27%

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

ANS: 3 (PC1, PC2, PC3)

>Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

ANS: 7 (PC1, PC2, PC3, PC4, PC5, PC6, PC7)

# Interpreting PCA results

Create a biplot of the wisc.pr using the biplot() function.

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

ANS: The interpretation is very difficult. The labels are overlapped and there appears to be a high density of data points clustered in the center of the plot

```{r}
biplot(wisc.pr)
```

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```
> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

ANS: Since PC1 and PC2 contains the more variance, we can observe a better differentiation between two groups

```{r}
# Scatter plot observations by components 1 and 3
plot( wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis , 
     xlab = "PC1", ylab = "PC3")
```

Make a nice ggplot version

```{r}
pc <- as.data.frame(wisc.pr$x)

library(ggplot2)

ggplot(pc, aes(x=PC1,y=PC2, col=diagnosis)) + geom_point()


```
```{r}
v<- summary(wisc.pr)
v$importance[2,]
```

## Variance explained

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Calculate the variance explained by each principal component by dividing by the total variance explained of all principal components. Assign this to a variable called pve and create a plot of variance explained for each principal component.

```{r}
# Variance explained by each principal component: pve
pve <- v$importance[2,]

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

# Alternative scree plot of the same data, note data driven y-axis

```{r}
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```


```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

## Communicating PCA results

>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.

ANS: The loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean is **-0.26085376**

```{r}
wisc.pr$rotation[,1]["concave.points_mean"]
```

## Hierarchical clustering

First scale the wisc.data data and assign the result to data.scaled.

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

```

Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to data.dist

```{r}
# Scale the wisc.data data using the "scale()" function
data.dist <- dist(data.scaled)

```

Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.

```{r}
wisc.hclust <- hclust(data.dist,method="complete")
```   

>Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```


## Selecting number of clusters

Use cutree() to cut the tree so that it has 4 clusters. Assign the output to the variable wisc.hclust.clusters.

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,h=19)
#We can use the table() function to compare the cluster membership to the actual diagnoses.
table(wisc.hclust.clusters, diagnosis)
```

>Q11. OPTIONAL: Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? How do you judge the quality of your result in each case?

ANS: The quality of the results are based on  the purity of clusters: the sum of the largest class in each cluster divided by the total number of observations. We have better results when the height number is higher. Therefore, any of the numbers between 2 and 10 show better results than height 19

```{r}
#Function to determine the purity of the clusters
purity<-function(h,hclust_data){
wisc.hclust.clusters <- cutree(hclust_data,h=h)
table_clust<-table(wisc.hclust.clusters, diagnosis)
purity <- sum(apply(table_clust, 2, max)) / sum(table_clust)
print(purity)  
}
  
```

```{r}
#Using height = 2
h=2
purity(h,wisc.hclust)
```

```{r}
#Using height = 6
h=6
purity(h,wisc.hclust)
```

```{r}
#Using height = 10
h=10
purity(h,wisc.hclust)
```

## Using different methods

As we discussed in our last class videos there are number of different “methods” we can use to combine points during the hierarchical clustering procedure. These include "single", "complete", "average" and (my favorite) "ward.D2".

> Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

ANS: There is not a "best" method. However, we can choose the method depending on the nature of your data. For this specific project, we are looking for clusters that can differentiate between benign and malign samples. Therefore, my favorite method would be "ward.D2" since it shows more clearly the two separate clusters

```{r}
#Using "complete" method
wisc.hclust.complete <- hclust(data.dist,method="complete")
plot(wisc.hclust.complete)
#Using "single" method
wisc.hclust.single<- hclust(data.dist,method="single")
plot(wisc.hclust.single)
#Using "average" method
wisc.hclust.avg<- hclust(data.dist,method="average")
plot(wisc.hclust.avg)
#Using "ward.D2 method
wisc.hclust.ward<- hclust(data.dist,method="ward.D2")
plot(wisc.hclust.ward)

  
```



## 4. Combining methods

Here, we will use the results of PCA as the input to a clustering analysis.

We start with using 3 PCs

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:3]), method="ward.D2")
plot(wisc.pr.hclust)
```


```{r}
plot(wisc.pr.hclust)
abline(h=80,col="red")
```

```{r}
grps<- cutree(wisc.pr.hclust,k=2)
table(grps)
```


```{r}
table(grps,diagnosis)
```


```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```


Note the color swap here as the hclust cluster 1 is mostly “M” and cluster 2 is mostly “B” as we saw from the results of calling table(grps, diagnosis). To match things up we can turn our groups into a factor and reorder the levels so cluster 2 comes first and thus gets the first color (black) and cluster 1 gets the second color (red).

```{r}
g <- as.factor(grps)
levels(g)
```

```{r}
g <- relevel(g,2)
levels(g)
```

```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```
Now, we will use the results of PCA as the input to a clustering analysis using 7 PCs
```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")

#Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters

wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

>Q13. How well does the newly created model with four clusters separate out the two diagnoses?

ANS: If we compare the model with 2 cluster vs 4 clusters we can say that the four-cluster solution appears to provide a finer distinction since our goal is to separate benign from malignant cases. 

```{r}
wisc.pr.hclust.clusters.four <- cutree(wisc.pr.hclust, k=4)

# Compare to actual diagnoses
two<-table(wisc.pr.hclust.clusters, diagnosis)
two

four<-table(wisc.pr.hclust.clusters.four, diagnosis)
four
```

>Q14. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

ANS: It looks that wisc.pr.hclust.clusters with four clusters separated after PCA (variable called "four") provides the best separation in terms of diagnostic clarity, especially for identifying malignant cases, which is often the priority in medical diagnostics.

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,h=19)
thclust<-table(wisc.hclust.clusters, diagnosis)
thclust
two
four
```

#  Prediction

We will use the predict() function that will take our PCA model from before and new cancer cell data and project that data onto our PCA space.

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

>Q16. Which of these new patients should we prioritize for follow up based on your results?


Patient 2 appears to be in the "malign" diagnosis group. Therefore, patient 2 should be prioritized.








